import regex

WARNING_NO_COMPLIANCE_WITH_NAMING_SCHEME = (
    'Warning: File name "{0}" does not comply with the expected naming scheme.'
)

NOTE_UNEXPECTED_NUMBER_OF_ELEMENTS = (
    'Note: File name "{0}" consists of {1} parts instead of the expected 3.'
)

NOTE_FIRST_PART_SHOULD_BE_SIC = (
    'Note: The first part of the file name "{0}" is "{1}" but should be "SIC".'
)

NOTE_SECOND_PART_SHOULD_BE_A_NUMBER = (
    'Note: The second part of the file name "{0}" is "{1}" but should be a '
    'zero and a number between one and four.'
)

NOTE_LAST_PART_SHOULD_START_WITH_TWO_CAPITALS = (
    'Note: The last part of the file name "{0}" is "{1}" and should start '
    'with two capital letters, but doesn\'t.'
)


def extract_student_name_from(file_path) -> str:

    file_name = file_path.stem

    matches_naming_scheme = regex.fullmatch(
        pattern='SIC_0[1-4]_[[:upper:]]{2}[[:lower:]]*',
        string=file_name
    )

    if not matches_naming_scheme:
        print(WARNING_NO_COMPLIANCE_WITH_NAMING_SCHEME.format(file_name))

    file_name_elements = file_name.split('_')

    if len(file_name_elements) != 3:
        print(NOTE_UNEXPECTED_NUMBER_OF_ELEMENTS.format(
            file_name,
            len(file_name_elements)
        ))

    # Remove any empty strings, generated by splitting consecutive underscores
    for index, element in enumerate(file_name_elements):
        if element == '':
            file_name_elements.pop(index)

    # Remove the "SIC" part
    if file_name_elements[0] == 'SIC':
        file_name_elements.pop(0)
    else:
        print(NOTE_FIRST_PART_SHOULD_BE_SIC.format(
            file_name,
            file_name_elements[0]
        ))

    # Remove the number part
    if regex.fullmatch(pattern='0[1-4]', string=file_name_elements[0]):
        file_name_elements.pop(0)
    else:
        print(NOTE_SECOND_PART_SHOULD_BE_A_NUMBER.format(
            file_name,
            file_name_elements[0]
        ))

    # Format the name-surname part
    name_part = file_name_elements[-1]
    if regex.fullmatch(
            pattern='^[[:upper:]]{2}[[:lower:]]*',
            string=name_part
    ):
        file_name_elements[-1] = name_part[0] + '. ' + name_part[1:]
    else:
        print(NOTE_LAST_PART_SHOULD_START_WITH_TWO_CAPITALS.format(
            file_name,
            name_part
        ))

    return ' '.join(file_name_elements)
